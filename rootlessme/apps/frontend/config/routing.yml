# You can find more information about this file on the symfony website:
# http://www.symfony-project.org/reference/1_4/en/10-Routing

# static pages rules
about:
  url: /about
  param:
    module: static
    action: about

contact:
  url: /contact
  param:
    module: static
    action: contact
    
demo:
  url: /demo
  param:
    module: static
    action: demo

help:
  url: /help
  param:
    module: static
    action: help

home:
  url: /home
  param:
    module: static
    action: home

privacy:
  url: /privacy
  param:
    module: static
    action: privacy

safety:
  url: /safety
  param:
    module: static
    action: safety

terms:
  url: /terms
  param:
    module: static
    action: terms

# dashboard rules
dashboard:
  url: /dashboard
  param:
    module: dashboard
    action: index

# message rules
messages:
  url: /messages
  class:   sfDoctrineRoute
  param:
    module: message
    action: index
  options:
    model: Messages
    type: list
  requirements:
    sf_method: [get]

messages_create:
  url: /messages/create/:messageType
  class:   sfDoctrineRoute
  param:
    module: message
    action: create
  options:
    model: Messages
    type: object
  requirements:
    sf_method: [post]
    messageType: (reply|new)

messages_list:
  url: /messages/:list_type
  class:   sfDoctrineRoute
  param:
    module: message
    action: list
  options:
    model: Messages
    type: list
  requirements:
    sf_method: [get]
    list_type: (inbox|sent|trash)

messages_new:
  url: /messages/new
  class:   sfDoctrineRoute
  param:
    module: message
    action: new
  options:
    model: Messages
    type: object
  requirements:
    sf_method: [get]
    
messages_possible_recipient_list:
  url: /messages/possibleRecipients.:sf_format
  class:   sfDoctrineRoute
  param:
    module: message
    action: possibleRecipientList
  options:
    model: Messages
    type: list
  requirements:
    sf_method: [get]
    sf_format: (?:json)

messages_show:
  url:   /messages/:message_id
  class:   sfDoctrineRoute
  options: { model: Messages, type: object }
  param: { module: message, action: show }
  requirements:
    sf_method: [get]

# profile rules
profile:
  url: /profiles
  class:   sfDoctrineRoute
  param:
    module: profile
    action: index
  options:
    model: Profiles
    type: list
  requirements:
    sf_method: [get]

profile_edit_user:
  url:   /profiles/edit
  class:   sfDoctrineRoute
  options: { model: Profiles, type: object }
  param: { module: profile, action: edit }
  requirements:
    sf_method: [get]

profile_update_user:
  url:   /profiles/update/:section
  class:   sfRoute
  options:
    model: Profiles
    type: object
  param:
    module: profile
    action: update
  requirements:
    sf_method: [post]
    section: (account|additional|password|notifications)

profile_show_user:
  url:   /profiles/:profile_name
  class:   sfDoctrineRoute
  options: { model: Profiles, type: object }
  param: { module: profile, action: show }
  requirements:
    sf_method: [get]
    
# recommendation rules

recommendations_find_drivers:
  url: /recommendations/finddrivers
  param: { module: recommendations, action: findDrivers }
  requirements:
    sf_method: [get]

recommendations_find_passengers:
  url: /recommendations/findpassengers
  param: { module: recommendations, action: findPassengers }
  requirements:
    sf_method: [get]

recommendations:
  url: /recommendations
  param: { module: recommendations, action: index }
  
# review rules
review_create:
  url:     /reviews/create
  class:   sfDoctrineRoute
  options: { model: Reviews, type: object }
  param:   { module: review, action: create}
  requirements: { sf_method: post }

review_ratings:
  url:     /reviews/:id/graph
  class:   sfRoute
  param:   { module: review, action: graph}
  requirements: { sf_method: get }

# ride rules
ride:
  url: /rides
  param:
    module: ride
    action: index

ride_search:
  url: /rides/search
  param: { module: ride, action: search, sf_format: html }
  requirements:
    sf_format: (?:html)

# Ride creation
ride_new:
  url: /rides/new/:ride_type
  class:   sfRoute
  param:
    module: ride
    action: new
  requirements:
    sf_method: [get]
    ride_type: (offer|request)

ride_create:
  url: /rides/create/:ride_type
  class:   sfRoute
  param:
    module: ride
    action: create
  requirements:
    sf_method: [get]
    ride_type: (offer|request)
    
ride_edit:
  url: /rides/edit/:ride_type/:ride_id
  class:   sfRoute
  param:
    module: ride
    action: edit
  requirements:
    sf_method: [get]
    ride_type: (offer|request)
    
ride_update:
  url: /rides/update/:ride_type/:ride_id
  class:   sfRoute
  param:
    module: ride
    action: update
  requirements:
    sf_method: [post]
    ride_type: (offer|request)
    
ride_delete:
  url: /rides/delete/:ride_type/:ride_id
  class:   sfRoute
  param:
    module: ride
    action: delete
  requirements:
    sf_method: [post]
    ride_type: (offer|request)

ride_show:
  url: /rides/:ride_type/:ride_id
  param:
    module: ride
    action: show
  requirements:
    sf_method: [get]
    ride_type: (offer|request)

# search rules
search:
  url:   /search
  param: { module: search, action: search }

# seat rules
seats_offers_create:
  url: /seats/offers/create
  class:   sfDoctrineRoute
  param:
    module: seat
    action: offerCreate
  options:
    model: Seats
    type: object
  requirements:
    sf_method: [post]

seats_requests_create:
  url: /seats/requests/create
  class:   sfDoctrineRoute
  param:
    module: seat
    action: requestCreate
  options:
    model: Seats
    type: object
  requirements:
    sf_method: [post]

seats_update:
  url: /seats/update/:seat_id
  class:   sfDoctrineRoute
  param:
    module: seat
    action: update
  options:
    model: Seats
    type: object
  requirements:
    sf_method: [post]

seats_accept:
  url: /seats/accept
  param:
    module: seat
    action: accept
  requirements:
    sf_method: [post]

seats_decline:
  url: /seats/decline
  param:
    module: seat
    action: decline
  requirements:
    sf_method: [post]

seats_negotiation:
  url:   /seats/negotiation/:seat_id
  class:   sfDoctrineRoute
  options: { model: Seats, type: object }
  param: { module: seat, action: negotiation }
  requirements:
    sf_method: [get]

seats_show:
  url:   /seats/:seat_id
  class:   sfDoctrineRoute
  options: { model: Seats, type: object }
  param: { module: seat, action: show }
  requirements:
    sf_method: [get]
    
# sfGuard routes
sf_guard_forgot_password:
  url:   /forgot_password
  param: { module: sfGuardForgotPassword, action: index }
  
sf_guard_forgot_password_change:
  url:   /forgot_password/:unique_key
  class: sfDoctrineRoute
  options: { model: sfGuardForgotPassword, type: object }
  param: { module: sfGuardForgotPassword, action: change }
  requirements:
    sf_method: [get, post]

sf_guard_signin:
  url:   /login
  param: { module: sfGuardAuth, action: signin }

sf_guard_signout:
  url:   /logout
  param: { module: sfGuardAuth, action: signout }

sf_guard_password:
  url:   /request_password
  param: { module: sfGuardAuth, action: password }

sf_guard_register:
  url:   /register
  param: { module: sfGuardRegister, action: index }
  
# Symfony routes javascript helper
sf_routes_js:
  url: /js/sf.routes.js
  param: { module: sfRoutesJs, action: index }
  
#special event routes
buckeyes:
  url: /buckeyes
  param: { module: special, action: buckeyes }
  
patriots:
  url: /patriots
  param: { module: special, action: patriots }

werkout:
  url: /werkout
  param: { module: special, action: werkout }
  
halifaxpop:
  url: /halifaxpopexplosion
  param: { module: special, action: halifaxPop }
  
hangtownHalloween:
  url: /hangtownhalloween
  param: { module: special, action: hangtownHalloweenBall }

harvestfestival:
  url: /harvestfestival
  param: { module: special, action: harvestMusicFestival }
  
voodoo:
  url: /voodoo
  param: { module: special, action: voodoo }
  
mpmf12:
  url: /mpmf12
  param: { module: special, action: mpmf12 }
  
mullummusicfestival:
  url: /mullummusicfestival
  param: { module: special, action: mullum }
  
sharktank:
  url: /sharktank
  param: { module: special, action: sharkTank }

novascotiamusicweek:
  url: /nsmusicweek
  param: { module: special, action: novaScotiaMusicWeek }
  
abetterworldbydesign:
  url: /abetterworldbydesign
  param: { module: special, action: aBetterWorldByDesign }
  
nyc:
  url: /nyc
  param: { module: special, action: nyc }
  
special_event_register:
  url: /specialEvent/register
  param: { module: special, action: register }
  requirements: { sf_method: post }
  
special_nyc_register:
  url: /specialNyc/register
  param: { module: special, action: nycRegister }
  requirements: { sf_method: post }
  
# user rules
user_facebook_login:
  url: /facebook-connect-login
  param: { module: user, action: facebookConnectLogin }
  requirements: { sf_method: post }

# vehicle rules

vehicle_new:
  url:     /vehicles/new
  class:   sfDoctrineRoute
  options: { model: Vehicles, type: object }
  param:   { module: vehicle, action: new}
  requirements: { sf_method: get }

vehicle_create:
  url:     /vehicles/create
  class:   sfDoctrineRoute
  options: { model: Vehicles, type: object }
  param:   { module: vehicle, action: create}
  requirements: { sf_method: post }

vehicle_edit:
  url:     /vehicles/:vehicle_id/edit
  class:   sfDoctrineRoute
  options: { model: Vehicles, type: object }
  param:   { module: vehicle, action: edit}
  requirements: { sf_method: get }

vehicle_update:
  url:     /vehicles/:vehicle_id/update
  class:   sfDoctrineRoute
  options: { model: Vehicles, type: object }
  param:   { module: vehicle, action: update}
  requirements: { sf_method: put }

vehicle_show:
  url:     /vehicles/:vehicle_id
  class:   sfDoctrineRoute
  options: { model: Vehicles, type: object }
  param:   { module: vehicle, action: show}
  requirements: { sf_method: get }

# default rules
homepage:
  url:   /
  param: { module: static, action: home }

