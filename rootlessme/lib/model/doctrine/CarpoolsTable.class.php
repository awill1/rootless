<?php

/**
 * CarpoolsTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class CarpoolsTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object CarpoolsTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Carpools');
    }

    /**
     * Returns all Carpools with people and profiles
     *
     * @return Doctrine_Collection Returns a Carpools collection with profiles
     * and people included
     */
    public function getWithProfiles()
    {
        $q = $this->createQuery('c')
          ->leftJoin('c.People p')
          ->leftJoin('p.Profiles pr');

        return $q->execute();
    }

    /**
     * Returns all carpool records for the authenticated user
     * @return Doctrine_Collection Returns a carpools collection for the user
     */
    public function getMyCarpools()
    {
        // Create the return value
        $carpools = null;

        if (sfContext::getInstance()->getUser()->isAuthenticated())
        {
            // Get the authenticated user's personId
            $myId = sfContext::getInstance()->getUser()->getGuardUser()->getPersonId();
            $carpools = $this->getPassengersForPerson($myId);
        }

        return $carpools;
    }

    /**
     * Returns all Carpools for a person
     *
     * @param int $personId The person to get the carpools for
     *
     * @return Doctrine_Collection Returns a Carpools collection
     */
    public function getCarpoolsForPerson($personId)
    {
        $q = $this->createQuery('c')
          ->where('c.driver_id = ?', array($personId));

        return $q->execute();
    }

    /**
     * Returns carpools that are within $distance of the origin and destination
     * coordinates and optionally on a specified date.
     *
     * @param        float $distance The distance to search within
     * @param        float $originLatitude The latitude of the origin
     * @param        float $originLongitude The longitude of the origin
     * @param        float $destinationLatitude The latitude of the destination
     * @param        float $destinationLongitude The longitude of the destination
     * @param        string $date The date to search on
     *
     * @return Doctrine_Collection Returns a Carpools collection with profiles
     * and people included
     */
    public function getNearPoints ($distance,
                                   $originLatitude = null,
                                   $originLongitude =null,
                                   $destinationLatitude = null,
                                   $destinationLongitude = null,
                                   $date = null)
    {
        // TODO: Make the query detect order of locations
        // Use a query similar to the following
        // SELECT * FROM carpools c
        // INNER JOIN routes r
        // ON c.route_id = r.route_id
        // WHERE EXISTS
        // (
        //         SELECT *,  MIN(DISTANCE($origin->getLatitude(), $origin->getLongitude(), o.latitude, o.longitude)) as start_distance
        //         FROM locations o
        //         INNER JOIN  steps os
        //         ON os.step_id = o.step_id
        //         INNER JOIN  legs ole
        //         ON ole.leg_id = os.leg_id
        //         INNER JOIN routes oro
        //         ON oro.route_id = ole.route_id
        //         GROUP BY oro.route_id
        //         HAVING start_distance < $distance
        //           AND r.route_id = oro.route_id
        // )
        // AND EXISTS (
        //         SELECT *,  MIN(DISTANCE($destination->getLatitude(), $destination->getLongitude, d.latitude, d.longitude)) as end_distance
        //         FROM locations d
        //         INNER JOIN  steps ds
        //         ON ds.step_id = d.step_id
        //         INNER JOIN  legs dle
        //         ON dle.leg_id = ds.leg_id
        //         INNER JOIN routes dro
        //         ON dro.route_id = dle.route_id
        //         GROUP BY dro.route_id
        //         HAVING end_distance < $distance
        //           AND r.route_id = dro.route_id
        // );
        // Use a raw sql query because the relationship enforcement is less
        $q = new Doctrine_RawSql();
        // Curly braces are needed for component hydration
        $q->select('{c.*}, {r.*}');
        $q->from('carpools c');
        $q->innerJoin('routes r ON c.route_id = r.route_id');
        // See if we need to add a where clause for the origin location
        if ($originLatitude != null && $originLongitude != null){
            // Add the where clause that searchs for routes near the start
            // location
            $q->andWhere('EXISTS (
                 SELECT *,  MIN(DISTANCE(?, ?, o.latitude, o.longitude)) as start_distance
                 FROM locations o
                 INNER JOIN  steps os
                 ON os.step_id = o.step_id
                 INNER JOIN  legs ole
                 ON ole.leg_id = os.leg_id
                 INNER JOIN routes oro
                 ON oro.route_id = ole.route_id
                 GROUP BY oro.route_id
                 HAVING start_distance < ?
                   AND r.route_id = oro.route_id
                 )', array($originLatitude,
                            $originLongitude,
                            $distance));
        }
        // See if we need to add a where clause for the destination location
        if ($destinationLatitude != null && $destinationLongitude != null)
        {
            // Add the where clause that searchs for routes near the end
            // location
            $q->andWhere('EXISTS (
                 SELECT *,  MIN(DISTANCE(?, ?, d.latitude, d.longitude)) as end_distance
                 FROM locations d
                 INNER JOIN  steps ds
                 ON ds.step_id = d.step_id
                 INNER JOIN  legs dle
                 ON dle.leg_id = ds.leg_id
                 INNER JOIN routes dro
                 ON dro.route_id = dle.route_id
                 GROUP BY dro.route_id
                 HAVING end_distance < ?
                   AND r.route_id = dro.route_id
                  )', array($destinationLatitude,
                            $destinationLongitude,
                            $distance));
        }
        // See if we need to add a where clause for the date
        if ($date != null)
        {
            // Reformat the date to work with the database
            $date = date('Y-m-d', strtotime($date));
            $q = $q->andWhere('c.start_date = ?', $date);
        }
        // ON c.route_id = r.route_id
        // Add the components to the query so the results get hydrated into
        // their proper objects
        $q->addComponent('c', 'Carpools c');
        $q->addComponent('r', 'c.Routes r');

        // Run the query and return the results
        return $q->execute();
    }  
}