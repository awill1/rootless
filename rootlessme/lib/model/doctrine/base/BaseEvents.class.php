<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Events', 'doctrine');

/**
 * BaseEvents
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $idevent
 * @property string $name
 * @property date $date
 * @property time $time
 * @property string $pictureurl
 * @property string $description
 * @property string $url
 * @property string $certification
 * @property string $createdby
 * @property integer $location
 * @property timestamp $createdon
 * @property timestamp $modifiedon
 * @property Profiles $Profiles
 * @property Locations $Locations
 * @property Doctrine_Collection $TravelersAttendingEvent
 * 
 * @method integer             getIdevent()                 Returns the current record's "idevent" value
 * @method string              getName()                    Returns the current record's "name" value
 * @method date                getDate()                    Returns the current record's "date" value
 * @method time                getTime()                    Returns the current record's "time" value
 * @method string              getPictureurl()              Returns the current record's "pictureurl" value
 * @method string              getDescription()             Returns the current record's "description" value
 * @method string              getUrl()                     Returns the current record's "url" value
 * @method string              getCertification()           Returns the current record's "certification" value
 * @method string              getCreatedby()               Returns the current record's "createdby" value
 * @method integer             getLocation()                Returns the current record's "location" value
 * @method timestamp           getCreatedon()               Returns the current record's "createdon" value
 * @method timestamp           getModifiedon()              Returns the current record's "modifiedon" value
 * @method Profiles            getProfiles()                Returns the current record's "Profiles" value
 * @method Locations           getLocations()               Returns the current record's "Locations" value
 * @method Doctrine_Collection getTravelersAttendingEvent() Returns the current record's "TravelersAttendingEvent" collection
 * @method Events              setIdevent()                 Sets the current record's "idevent" value
 * @method Events              setName()                    Sets the current record's "name" value
 * @method Events              setDate()                    Sets the current record's "date" value
 * @method Events              setTime()                    Sets the current record's "time" value
 * @method Events              setPictureurl()              Sets the current record's "pictureurl" value
 * @method Events              setDescription()             Sets the current record's "description" value
 * @method Events              setUrl()                     Sets the current record's "url" value
 * @method Events              setCertification()           Sets the current record's "certification" value
 * @method Events              setCreatedby()               Sets the current record's "createdby" value
 * @method Events              setLocation()                Sets the current record's "location" value
 * @method Events              setCreatedon()               Sets the current record's "createdon" value
 * @method Events              setModifiedon()              Sets the current record's "modifiedon" value
 * @method Events              setProfiles()                Sets the current record's "Profiles" value
 * @method Events              setLocations()               Sets the current record's "Locations" value
 * @method Events              setTravelersAttendingEvent() Sets the current record's "TravelersAttendingEvent" collection
 * 
 * @package    RootlessMe
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
abstract class BaseEvents extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('events');
        $this->hasColumn('idevent', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('name', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 45,
             ));
        $this->hasColumn('date', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('time', 'time', 25, array(
             'type' => 'time',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('pictureurl', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 45,
             ));
        $this->hasColumn('description', 'string', 1024, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1024,
             ));
        $this->hasColumn('url', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('certification', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 45,
             ));
        $this->hasColumn('createdby', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 45,
             ));
        $this->hasColumn('location', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('createdon', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('modifiedon', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Profiles', array(
             'local' => 'createdby',
             'foreign' => 'idprofile'));

        $this->hasOne('Locations', array(
             'local' => 'location',
             'foreign' => 'idlocation'));

        $this->hasMany('TravelersAttendingEvent', array(
             'local' => 'idevent',
             'foreign' => 'events_idevent'));
    }
}