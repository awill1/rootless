<?php

/**
 * SeatsTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class SeatsTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     * @return object SeatsTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Seats');
    }

    /**
     * Gets the travel summary for a person
     * @param integer $person_id The person id
     * @return array The summary with ridesReceived and ridesGiven as keys
     */
    public function getTravelSummaryForPerson($person_id)
    {
        $connection = Doctrine_Manager::connection();
        // Get the rides received count first
        $query = 'SELECT COUNT(*) AS rides_received
                    FROM seats s
                    INNER JOIN seat_statuses ss
                    ON ss.seat_status_id = s.seat_status_id
                    WHERE s.pickup_date < now()
                    AND ss.slug = "accepted"
                    AND s.passenger_id = '.$person_id;
        $statement = $connection->execute($query);
        $statement->execute();
        $resultset = $statement->fetch(PDO::FETCH_OBJ);
        $ridesReceived = $resultset->rides_received;
        // Get the rides given count second
        $query = 'SELECT COUNT(*) AS rides_given
                    FROM seats s
                    INNER JOIN seat_statuses ss
                      ON ss.seat_status_id = s.seat_status_id
                    INNER JOIN carpools c
                      ON c.carpool_id = s.carpool_id
                    WHERE s.pickup_date < now()
                    AND ss.slug = "accepted"
                    AND c.driver_id = '.$person_id;
        $statement = $connection->execute($query);
        $statement->execute();
        $resultset = $statement->fetch(PDO::FETCH_OBJ);
        $ridesGiven = $resultset->rides_given;

        return array(
            'ridesReceived' => $ridesReceived,
            'ridesGiven' => $ridesGiven
        );
    }
    
    /**
     * Gets the confirmed seats from the past which represent the travel
     * history for the person
     * @param integer $person_id The person id
     * @return Doctrine_Collection  The past confirmed seats
     */
    public function getTravelHistoryForPerson($person_id)
    {
        $q = $this->createQuery('s')
            ->innerJoin('s.Passengers pa')
            ->innerJoin('s.Carpools c')
            ->innerJoin('s.SeatStatuses ss')
            ->innerJoin('s.Routes r')
            ->addWhere('s.seat_status_id = ? ', array(2))
            ->addWhere('(pa.person_id = ? OR c.driver_id = ?)',array($person_id, $person_id));
        
        // Add the filter to only get seats from before today
        $q = SeatsTable::addPastSeatsFilter($q);

        return $q->execute();
    }

    /**
     * Returns all Seats with driver and passenger profiles for a specific
     * carpool id
     * @param integer $carpool_id The carpool id
     * @return Doctrine_Collection Returns a seats collection with profiles
     * and people included
     */
    public function getSeatsWithProfilesForCarpool($carpool_id)
    {
        $q = $this->createQuery('s')
          ->innerJoin('s.Passengers pa')
          ->innerJoin('pa.People p')
          ->innerJoin('p.Profiles pr')
          ->innerJoin('s.SeatStatuses ss')
          ->addWhere('s.carpool_id = ?',array($carpool_id));

        return $q->execute();
    }

    /**
     * Returns all Seats with driver and passenger profiles for a specific
     * passenger id
     * @param integer $passenger_id The passenger id
     * @return Doctrine_Collection Returns a seats collection with profiles
     * and people included
     */
    public function getSeatsWithProfilesForPassenger($passenger_id)
    {
        $q = $this->createQuery('s')
          ->innerJoin('s.Carpools c')
          ->innerJoin('c.People p')
          ->innerJoin('p.Profiles pr')
          ->innerJoin('s.SeatStatuses ss')
          ->addWhere('s.passenger_id = ?',array($passenger_id));

        return $q->execute();
    }

    /**
     * Gets a seat with the carpool and passenger joined
     * @param integer $seat_id The seat id
     * @return Seats The seat 
     */
    public function getSeatWithCarpoolAndPassenger($seat_id)
    {
        $q = $this->createQuery('s')
          ->innerJoin('s.Passengers pa')
          ->innerJoin('pa.People pap')
          ->innerJoin('pap.Profiles papr')
          ->innerJoin('s.Carpools c')
          ->innerJoin('c.People cp')
          ->innerJoin('cp.Profiles cpr')
          ->innerJoin('s.SeatStatuses ss')
          ->addWhere('s.seat_id = ?',array($seat_id));

        $results = $q->execute();
        return $results->getFirst();
    }

    /**
     * Gets the seats related to the person. The person can be either the 
     * driver or the passenger.
     * @param integer $person_id The user's people id
     * @return Doctrine_Collection The seats related to the person 
     */
    public function getSeatsForPerson($person_id)
    {
        $q = $this->createQuery('s')
          ->innerJoin('s.Passengers pa')
          ->innerJoin('pa.People pap')
          ->innerJoin('pap.Profiles papr')
          ->innerJoin('s.Carpools c')
          ->innerJoin('c.People cp')
          ->innerJoin('cp.Profiles cpr')
          ->innerJoin('s.SeatStatuses ss')
          ->innerJoin('s.Routes r')
          ->addWhere('pa.person_id = ? OR c.driver_id = ?',array($person_id, $person_id));
        
        // Add the filter to only get seats on or after today
        $q = SeatsTable::addCurrentSeatsFilter($q);

        return $q->execute();
    }
    
    /**
     * Adds a where clause to a query to only return seats occuring today or in
     * the future
     * @param Doctrine_Query $query The query
     * @return Doctrine_Query The query with a current rides where clause 
     */
    public static function addCurrentSeatsFilter($query)
    {
        // Add a where clause to the query to only return seats today or in
        // the future
        return $query->andWhere('s.pickup_date >= ?', date('Y-m-d'));
    }
    
    /**
     * Adds a where clause to a query to only return seats occuring before today
     * @param Doctrine_Query $query The query
     * @return Doctrine_Query The query with a past rides where clause 
     */
    public static function addPastSeatsFilter($query)
    {
        // Add a where clause to the query to only return seats today or in
        // the future
        return $query->andWhere('s.pickup_date < ?', date('Y-m-d'));
    }
}