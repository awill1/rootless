<?php

/**
 * Carpools
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    RootlessMe
 * @subpackage model
 * @author     awilliams
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
class Carpools extends BaseCarpools
{
    /**
     * Gets the ride id. Common function for ride types. This should be an interface.
     * @return Integer The ride id
     */
    public function getRideId()
    {
        return $this->getCarpoolId();
    }
    
    /**
     * Gets the ride type. Common function for ride types. This should be an interface.
     * @return String The ride type
     */
    public function getRideType()
    {
        return 'offer';
    }
    
    /**
     * Gets the origin location for a route
     * @return Locations The origin
     */
    public function getOriginLocation()
    {
        $first_location = $this->getRoutes()->getOriginLocation();

        return $first_location;
    }

    /**
     * Gets the destination location for a route
     * @return Locations The destination
     */
    public function getDestinationLocation()
    {
        $last_location = $this->getRoutes()->getDestinationLocation();

        return $last_location;
    }

    /**
     * Returns a string that represents the carpool. Overrides the default
     * __toString method.
     * @return string The carpool represented as a string
     */
    public function __toString()
    {
        $carpoolName = "";
        $route = $this->getRoutes();
        $carpoolName = date("m/d/Y",strtotime($this->getStartDate()))." - ".$route->getOriginString()." to ".$route->getDestinationString();

        return $carpoolName;

    }
    
    /**
     * Checks to see if a person is the owner of the ride post
     * @param type $personId The user's person id
     * @return boolean True if the user is the poster. False
     * otherwise
     */
    public function isMyRide($personId)
    {
        $isMyRide = false;
        
        // Check to see if the user is the driver
        if ($this->getDriverId() == $personId)
        {
            $isMyRide = true;
        }
        
        return $isMyRide;
    }
    
    /**
     * Checks to see if the ride is deleted
     * @return boolean True if the ride is deleted. False, otherwise.
     */
    public function isDeleted()
    {
        $isDeleted = false;
        
        // Check to see if the ride status is deleted
        if ($this->getStatusId() == RideStatuses::$statuses[RideStatuses::RIDE_DELETED])
        {
            $isDeleted = true;
        }
        
        return $isDeleted;
    }
    
    /**
     * Finds potential passengers for the driver
     * @param float $distance The distance to search for in miles
     * @return Doctrine_Collection The matched passengers
     */
    public function findPassengers($distance)
    {
        // Get the list of all intermediate points
        $intermediatePoints = $this->getRoutes()->getLocationsInRoute();
        $intermediatePointsCount = count($intermediatePoints);
        sfContext::getInstance()->getLogger()->info( sprintf('Intermediate point count: %d', $intermediatePointsCount ));
        
        // Keep an array of passengers that match
        $results = new Doctrine_Collection('Passengers');
        
        // We need to keep a list of passengers whose pick up and drop off
        // locations matched along the route
        $pickUpMatches = new Doctrine_Collection('Passengers');
        $dropOffMatches = new Doctrine_Collection('Passengers');

        // Build the array of points to be fed into the route boxer
	$latlngs = array();
        foreach ($intermediatePoints as $index => $point)
        {
            $latlngs[] = new LatLng($point['latitude'], $point['longitude']);
        }
        
        // Build the route boxes to search within. Eventually this should
        // be replaced with a spatial database supporting OpenGIS like PostGIS
        $distanceInKilometers = $distance * 1.60934; 
        $routeBoxer = new RouteBoxer();
	$boxes = $routeBoxer->box($latlngs, $distanceInKilometers);
        
        // Loop through all of the boxes and get all origin points and 
        // destination points in the box
	foreach ($boxes as $box)
	{
            // Get the passengers who can be picked up in the box
            $pickUpPassengerMatches = Doctrine_Core::getTable('Passengers')->getPickUpPassengersInBox($box, $this->getStartDate());
            
            // Add the pick up passengers to the pick up matches list
            foreach ($pickUpPassengerMatches as $pickUpPassengerMatch) 
            {
                // Add the pick up passenger to the matches. This prevents duplicates.
                $pickUpMatches->add($pickUpPassengerMatch, $pickUpPassengerMatch->getPassengerId());
            }
            
            // Get the passengers who can be dropped off up in the box
            $dropOffPassengerMatches = Doctrine_Core::getTable('Passengers')->getDropOffPassengersInBox($box,  $this->getStartDate());
            
            // Add the drop off passengers to the drop off matches list
            foreach($dropOffPassengerMatches as $dropOffPassengerMatch)
            {
                // Add the drop off passenger to the matches. This prevents duplicates.
                $dropOffMatches->add($dropOffPassengerMatch, $dropOffPassengerMatch->getPassengerId());
            }
	}
        
        // Decide which of the matches are true matches
        foreach ($pickUpMatches as $pickUpMatch)
        {
            $pickUpMatchId = $pickUpMatch->getPassengerId();
            
            // Passenger matches must exist in the pickup and dropoff lists
            if ($dropOffMatches->contains($pickUpMatchId))
            {
                // Filter to make sure the passenger is going in the same 
                // direction as the driver. The distance from the driver origin 
                // to the passenger pick up location must be less than the 
                // distance to the passenger drop off location
                $driverOriginLatitude = $this->getRoutes()->getOriginLatitude();
                $driverOriginLongitude = $this->getRoutes()->getOriginLongitude();
                $passengerPickUpLatitude = $pickUpMatch->getRoutes()->getOriginLatitude();
                $passengerPickUpLongitude = $pickUpMatch->getRoutes()->getOriginLongitude();
                $passengerDropOffLatitude = $pickUpMatch->getRoutes()->getDestinationLatitude();
                $passengerDropOffLongitude = $pickUpMatch->getRoutes()->getDestinationLongitude();
                if(GeometryHelpers::getDistanceBetweenPoints($driverOriginLatitude, $driverOriginLongitude, $passengerPickUpLatitude, $passengerPickUpLongitude)
                        < GeometryHelpers::getDistanceBetweenPoints($driverOriginLatitude, $driverOriginLongitude, $passengerDropOffLatitude, $passengerDropOffLongitude))
                {
                    // This is a real match! Add it to results.
                    $results->add($pickUpMatch);
                }
            }
        }
        
        return $results;
    }
}