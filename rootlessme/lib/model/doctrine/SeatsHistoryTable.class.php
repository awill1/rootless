<?php

/**
 * SeatsHistoryTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class SeatsHistoryTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object SeatsHistoryTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('SeatsHistory');
    }

    /**
     * Returns the history for a seat
     * @param int $seat_id The seat id of the seat
     * @return DoctrineCollection The history for
     * the seat
     */
    public function getHistoryForSeat($seat_id)
    {
        // Need this function to match this query
        // select * from seats
        // where seat_id = 1
        // order by created_at DESC;

        $q = $this->createQuery('s')
                ->innerJoin('s.People p')
                ->leftJoin('p.Profiles pr')
                ->innerJoin('s.Routes r')
                ->where('s.seat_id = ?', $seat_id)
                ->orderBy('s.created_at DESC');

        return $q->execute();
    }
    
    /**
     * Returns the history changes for a seat
     * @param int $seat_id The seat id of the seat
     * @return Array The history of changes for
     * the seat
     */
    public function getHistoryDifferencesForSeat($seat_id)
    {
        // First get the seat history items for the seat. 
        $seatHistoryItems = $this->getHistoryForSeat($seat_id);

        // Convert the seat history collections into an array
        //$seatHistoryArray = $seatHistoryItems->toArray();
        
        // Create the array that will contain differences
        $seatHistoryDifferences = array();
        
        for ($i = 0 ; $i < $seatHistoryItems->count() ; $i++ )
        {
            // History items are sorted in descending date order so newer items
            // appear before older items
            $newItem = $seatHistoryItems[$i];
            // The final case will be out of range so set allow the old item to 
            // be null if the index would be out of range
            $oldItem = null;
            if ($i+1 != $seatHistoryItems->count())
            {
                $oldItem = $seatHistoryItems[$i+1];
            }
            
            // Get the differences between the old and the new item
            $seatDifference = new SeatsHistoryDifference($oldItem, $newItem);
            
            // Add the difference to the differences array
            $seatHistoryDifferences[] = $seatDifference;
        }
        
        return $seatHistoryDifferences;
    }
    
    /**
     * Returns the history changes for a seat between the last two history
     * items
     * @param int $seatId The seat id of the seat
     * @return SeatHistoryDifference The history difference of changes for
     * the seat between the latest two history items. Null if no history items
     * were found
     */
    public function getLatestHistoryDifferencesForSeat($seatId)
    {
        // First get the last two seat history items for the seat. 
        $seatHistoryItems = $this->getLatestHistoriesForSeat($seatId, 2);
        
        // Create the array that will contain differences
        $seatDifference;
        
        if ($seatHistoryItems->count() > 0)
        {
            // Get the newest history item
            $newestItem = $seatHistoryItems[0];
            
            // Get the second newest history item
            $olderItem;
            if ($seatHistoryItems->count() > 1)
            {
                $olderItem = $seatHistoryItems[1];
            }
            
            // Get the differences between the old and the new item
            $seatDifference = new SeatsHistoryDifference($olderItem, $newestItem);
            
        }
        
        return $seatDifference;
    }

    /**
     * Returns the latest history item for a seat
     * @param int $seat_id The seat id of the seat
     * @return SeatsHistory The history for
     * the seat
     */
    public function getLatestHistoryForSeat($seat_id)
    {
        // Need this function to match this query
        // select * from seats
        // where seat_id = 1
        // order by created_at DESC;

        $q = $this->createQuery('s')
                ->innerJoin('s.People p')
                ->leftJoin('p.Profiles pr')
                ->innerJoin('s.Routes r')
                ->where('s.seat_id = ?', $seat_id)
                ->orderBy('s.created_at DESC');

        return $q->fetchOne();
    }
    
    /**
     * Returns the latest history items for a seat
     * @param int $seat_id The seat id of the seat
     * @param int $count The number of histories to return
     * @return Doctrine_Collection The history items for
     * the seat
     */
    public function getLatestHistoriesForSeat($seat_id, $count = 1)
    {
        // Need this function to match this query
        // select * from seats
        // where seat_id = 1
        // order by created_at DESC;

        $q = $this->createQuery('s')
                ->innerJoin('s.People p')
                ->leftJoin('p.Profiles pr')
                ->innerJoin('s.Routes r')
                ->where('s.seat_id = ?', $seat_id)
                ->orderBy('s.created_at DESC')
                ->limit($count);

        return $q->execute();
    }
}