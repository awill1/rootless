<?php

/**
 * MessagesTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class MessagesTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object MessagesTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Messages');
    }

    public function getMessages(Doctrine_Query $q = null)
    {
        return $this->addActiveMessagesQuery($q)->execute();
    }

    public function addActiveMessagesQuery(Doctrine_Query $q = null)
    {
        if (is_null($q))
        {
            $q = Doctrine_Query::create()
                 ->from('Messages m');
        }

        return $q;
    }

    public function getMyMessages()
    {
        // Create the return value
        $messages = null;

        if (sfContext::getInstance()->getUser()->isAuthenticated())
        {
            // Get the authenticated user's personId
            $myId = sfContext::getInstance()->getUser()->getGuardUser()->getPersonId();

            // Build the query to get the user's messages
            // The query should be similar to
            // select * from messages m
            // inner join message_recipients mr
            // on m.message_id = mr.message_id
            // inner join profiles p
            // on p.person_id = m.author_id
            // where mr.person_id = 1;
            $q = $this->createQuery('m')
                ->innerJoin('m.MessageRecipients mr')
                ->innerJoin('m.People p')
                ->innerJoin('p.Profiles pr')
                ->where('mr.person_id = ?', $myId)
                ->orderBy('m.created_at DESC');

            $messages = $q->execute();
        }

        return $messages;
    }

    public function getMyNewMessages()
    {
        // Create the return value
        $messages = null;

        if (sfContext::getInstance()->getUser()->isAuthenticated())
        {
            // Get the authenticated user's personId
            $myId = sfContext::getInstance()->getUser()->getGuardUser()->getPersonId();

            // Build the query to get the user's messages
            // The query should be similar to
            // select * from messages m
            // inner join message_recipients mr
            // on m.message_id = mr.message_id
            // inner join profiles p
            // on p.person_id = m.author_id
            // where mr.person_id = 1
            // and mr.unread = 1;
            $q = $this->createQuery('m')
                ->innerJoin('m.MessageRecipients mr')
                ->innerJoin('m.People p')
                ->innerJoin('p.Profiles pr')
                ->where('mr.person_id = ?', $myId)
                ->andWhere('mr.unread = 1')
                ->orderBy('m.created_at DESC');

            $messages = $q->execute();
        }

        return $messages;
    }

    public function getMyConversationMessagesWithProfiles($conversationId)
    {
        // Create the return value
        $messages = null;

        if (sfContext::getInstance()->getUser()->isAuthenticated())
        {
            // Get the authenticated user's personId
            $myId = sfContext::getInstance()->getUser()->getGuardUser()->getPersonId();

            // Build the query to get the user's messages
            // The query should be similar to
            // select * from messages m
            // inner join message_recipients mr
            // on m.message_id = mr.message_id
            // inner join profiles p
            // on p.person_id = m.author_id
            // where mr.person_id = 1
            // and mr.unread = 1;
            $q = $this->createQuery('m')
                ->innerJoin('m.MessageRecipients mr')
                ->innerJoin('m.People p')
                ->innerJoin('p.Profiles pr')
                ->where('(mr.person_id = ? OR m.author_id = ?)', array($myId,$myId))
                ->andWhere('m.conversation_id = ?', $conversationId)
                ->orderBy('m.created_at ASC');

            $messages = $q->execute();
        }

        return $messages;
    }

        public function getMyLastMessagesForConversationWithProfiles()
    {
        // Create the return value
        $messages = null;

        if (sfContext::getInstance()->getUser()->isAuthenticated())
        {
            // Get the authenticated user's personId
            $myId = sfContext::getInstance()->getUser()->getGuardUser()->getPersonId();

            // Build the query to get the user's messages
            // The query should be similar to
            // SELECT *
            // FROM (
            //   SELECT *
            //   FROM messages
            //   ORDER BY created_at DESC
            // ) AS m
            // INNER JOIN message_recipients mr
            // ON m.message_id = mr.message_id
            // INNER JOIN profiles p
            // ON p.person_id = m.author_id
            // WHERE mr.person_id = 1 OR m.author_id = 1
            // GROUP BY m.conversation_id
            // HAVING m.conversation_id IS NOT NULL
            // ORDER BY m.created_at DESC;
//            $q = $this->createQuery('m')
//                ->innerJoin('m.MessageRecipients mr')
//                ->innerJoin('m.People p')
//                ->innerJoin('p.Profiles pr')
//                ->where('(mr.person_id = ? OR m.author_id = ?)', array($myId,$myId))
//                ->groupBy('m.conversation_id')
//                ->having('m.conversation_id IS NOT NULL')
//                ->orderBy('m.created_at DESC');
//            $q = Doctrine_Query::create()
//                ->select('*')
//                ->from('(SELECT * FROM messages ORDER BY created_at DESC) AS m')
//                ->innerJoin('m.MessageRecipients mr')
//                ->innerJoin('m.People p')
//                ->innerJoin('p.Profiles pr')
//                ->where('(mr.person_id = ? OR m.author_id = ?)', array($myId,$myId))
//                ->groupBy('m.conversation_id')
//                ->having('m.conversation_id IS NOT NULL')
//                ->orderBy('m.created_at DESC');
//            $q = Doctrine_Query::create()
//                ->select('*')
//                ->from('Messages AS m')
//                ->leftJoin('m.Messages md ON m.conversation_id = md.conversation_id')
//                ->innerJoin('m.MessageRecipients mr')
//                ->innerJoin('m.People p')
//                ->innerJoin('p.Profiles pr')
//                ->where('(mr.person_id = ? OR m.author_id = ?)', array($myId,$myId))
//                ->groupBy('m.conversation_id')
//                ->having('m.conversation_id IS NOT NULL')
//                ->orderBy('m.created_at DESC');
            // Due to the complexity of the query, raw sql needs to be used
            $q = new Doctrine_RawSql();
            $q->select('{m1.*}, {mr.*}, {p.*}, {pr.*}')
              ->from('messages m1')
              ->leftJoin('messages m2 ON m1.conversation_id = m2.conversation_id AND m1.created_at < m2.created_at')
              ->leftJoin('message_recipients mr ON (m1.message_id = mr.message_id AND mr.person_id = ?)', array($myId))
              ->innerJoin('people p ON m1.author_id = p.person_id')
              ->innerJoin('profiles pr ON p.person_id = pr.person_id')
              ->where('m2.conversation_id IS NULL')
              ->andWhere('m1.conversation_id IS NOT NULL')
              ->andWhere('(mr.person_id = ? OR m1.author_id = ?)', array($myId,$myId))
              ->orderBy('m1.created_at DESC')
              ->addComponent('m1', 'Messages m1')
              ->addComponent('mr', 'm1.MessageRecipients mr')
              ->addComponent('p', 'm1.People p')
              ->addComponent('pr', 'p.Profiles pr');
//            select m1.*
//from messages m1
//left join messages m2
//on m1.conversation_id=m2.conversation_id
//and m1.created_at < m2.created_at
//where m2.conversation_id IS NULL
//and m1.conversation_id IS NOT NULL
//ORDER BY m1.created_at DESC;

            // The query needs to return an array to minimize the number
            // of followup queries needed for the author profile and unread
            // flag.
            $messages = $q->execute(array(), Doctrine_Core::HYDRATE_ARRAY);
        }

        return $messages;
    }

    public function getMySentMessages()
    {
        // Create the return value
        $messages = null;

        if (sfContext::getInstance()->getUser()->isAuthenticated())
        {
            // Get the authenticated user's personId
            $myId = sfContext::getInstance()->getUser()->getGuardUser()->getPersonId();

            // Build the query to get the user's sent messages
            // The query should be similar to
            // select * from messages m
            // inner join profiles p
            // on p.person_id = m.author_id
            // where mr.person_id = 1;
            $q = $this->createQuery('m')
                ->innerJoin('m.People p')
                ->innerJoin('p.Profiles pr')
                ->where('m.author_id = ?', $myId)
                ->orderBy('m.created_at DESC');

            $messages = $q->execute();
        }

        return $messages;
    }
}